依赖倒置原则（DIP）
  1.高层模块需要稳定，不应该直接依赖低层模块。低层模块的变化会导致高层模块不稳定。二者都应该依赖于抽象。
  2.抽象不应该依赖于实现细节，实现细节应该依赖于抽象。

开放封闭原则（OCP）
  1.对扩展开放，对更改封闭。
  2.类模块应该是可扩展的，但是不可修改。   对新需求，不修改原有代码，扩展新代码解决需求。

单一职责原则（SRP）
  1.一个类应该仅有一个引起他变化的原因。
  2.变化的方向隐含着类的责任。

Liskov替换原则（LSP）
  1.子类必须能够替换他们的基类。
  2.继承表达类型抽象。

接口隔离原则（ISP）
  1.不应该强迫客户程序依赖它不用的方法。
  2.接口应该小而完备。   对于publick继承，不要把不必要的方法继承出去。 子类使用就protected, 本类用就private

优先使用对象组合，而不是类继承
  1.类继承通常是“白箱复用”，对象组合通常为“黑箱复用”。
  2.继承破坏了封装性，子类和基类耦合度高。
  3.对象组合只要求被组合的对象具有良好定义的接口，耦合度低。

封装变化点
  使用封装创建对象之间的分界层。一层变化一层稳定。修改一侧时不影响另一侧。   还是抽象的概念

针对接口编程，不针对实现编程
  1.不将变量类型声明为特定具体类，而是声明为某个接口
  2.客户程序无需获知对象的具体类型，只需要知道对象的所有接口。
  3.减少系统中各部分的依赖关系，从而实现“高内聚，低耦合”的设计方案。
